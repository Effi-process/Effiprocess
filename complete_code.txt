===============================
EFFIPROCESS - COMPLETE CODE (AKTUELL - 29.08.2025)
===============================

=== INDEX.HTML ===
<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Effiprocess</title>
  <link rel="stylesheet" href="styles.css" />
  <script defer src="app.js"></script>
</head>
<body>
  <!-- Loading Screen -->
  <div class="loading-screen" id="loadingScreen">
    <div class="loading-content">
      <div class="loading-logo">
        <h1 class="loading-title">EFFIPROCESS</h1>
        <p class="loading-subtitle">AI-POWERED AUTOMATION</p>
      </div>
      <div class="loading-progress">
        <div class="progress-number" id="progressNumber">0</div>
        <div class="progress-label">LOADING</div>
        <div class="progress-bar">
          <div class="progress-fill" id="progressFill"></div>
        </div>
        <div class="quality-text">QUALITY IS OUR STANDARD</div>
      </div>
    </div>
  </div>

  <!-- Canvas für Bubble Animation -->
  <canvas id="dotAnimation" class="dot-canvas"></canvas>

  <!-- Vertikale Pfeile für Slides -->
  <div class="nav-vertical" id="navVertical">
    <button class="arrow up" data-action="prev" aria-label="Vorheriger Bereich">▲</button>
    <button class="arrow down" data-action="next" aria-label="Nächster Bereich">▼</button>
  </div>

  <!-- Fixed Header -->
  <header class="header">
    <h1 class="header-logo">Effiprocess</h1>
  </header>

  <!-- Vollbild-Slides -->
  <main id="slides">
    <!-- SLIDE 0: HERO -->
    <section class="slide hero" data-slide="0">
      <div class="hero-text-container">
        <h2 class="hero-main-text">Wir entwickeln intelligente AI-Agenten und intuitive Oberflächen,<br/>die komplexe Prozesse vereinfachen.<br/><br/>Mit unseren Lösungen steuern Sie Daten, Systeme und Workflows<br/>in Echtzeit – klar, schnell und effizient.<br/><br/>Ihre Mitarbeiter gewinnen Zeit, Routineaufgaben werden automatisiert,<br/>Entscheidungen präziser.<br/><br/>So entsteht Raum für Innovation, Wachstum und das Wesentliches.</h2>
      </div>
    </section>

    <!-- SLIDE 1: SERVICES - Three beautiful pages + step-by-step visualization -->
    <section class="slide services" data-slide="1">
      <div class="services-container">
        <!-- First Services Page: Website Design (01/03) -->
        <div class="services-page" id="services-page-0" style="opacity: 1;">
          <div class="services-content-grid">
            <!-- Left side: Text content -->
            <div class="services-text-section">
              <div class="services-category">Our expertise</div>
              <h3 class="services-headline">Modern websites that drive<br/>your business forward.</h3>
              <p class="services-description">
                We create responsive, high-performance websites with cutting-edge technologies. 
                From concept to deployment, we ensure your digital presence stands out with 
                seamless user experiences and powerful backend solutions.
              </p>
              <div class="services-features">
                <div class="feature-item">Responsive Design</div>
                <div class="feature-item">Performance Optimized</div>
                <div class="feature-item">SEO Ready</div>
              </div>
            </div>
            
            <!-- Right side: Visual elements -->
            <div class="services-visual-section">
              <!-- Geometric background elements -->
              <div class="geometric-shape shape-1"></div>
              <div class="geometric-shape shape-2"></div>
              
              <!-- Browser illustration -->
              <div class="browser-illustration">
                <svg viewBox="0 0 400 280" class="browser-svg">
                  <!-- Browser window -->
                  <rect x="20" y="20" width="360" height="240" rx="16" fill="white" stroke="#a078c8" stroke-width="3"/>
                  <!-- Browser top bar -->
                  <rect x="20" y="20" width="360" height="50" rx="16" fill="#a078c8"/>
                  <rect x="25" y="65" width="350" height="190" rx="8" fill="#f8f9fa"/>
                  <!-- Traffic lights -->
                  <circle cx="45" cy="45" r="7" fill="#ff5f5f"/>
                  <circle cx="70" cy="45" r="7" fill="#ffbd2e"/>  
                  <circle cx="95" cy="45" r="7" fill="#27ca3f"/>
                  <!-- Search bar -->
                  <rect x="150" y="35" width="180" height="20" rx="10" fill="white" stroke="#8a6fb8" stroke-width="1"/>
                  <circle cx="320" cy="45" r="8" fill="none" stroke="#8a6fb8" stroke-width="2"/>
                  <!-- Plus button -->
                  <text x="355" y="52" font-size="18" fill="white" text-anchor="middle">+</text>
                  <!-- Content area -->
                  <rect x="45" y="85" width="200" height="8" rx="4" fill="#a078c8"/>
                  <rect x="45" y="105" width="160" height="8" rx="4" fill="#a078c8"/>
                  <rect x="45" y="125" width="180" height="8" rx="4" fill="#c8a0d8"/>
                  <!-- Sidebar -->
                  <rect x="280" y="85" width="80" height="80" rx="8" fill="#e8e0f0"/>
                  <rect x="290" y="95" width="60" height="6" rx="3" fill="#a078c8"/>
                  <rect x="290" y="110" width="45" height="6" rx="3" fill="#a078c8"/>
                  <rect x="290" y="125" width="55" height="6" rx="3" fill="#a078c8"/>
                  <!-- Bottom elements -->
                  <rect x="45" y="180" width="120" height="50" rx="8" fill="#f0e8ff"/>
                  <rect x="180" y="180" width="120" height="50" rx="8" fill="#f0e8ff"/>
                </svg>
              </div>
              <div class="page-number">01/03</div>
            </div>
          </div>
        </div>
        
        <!-- Second Services Page: UX/Interface Design (02/03) -->
        <div class="services-page" id="services-page-1" style="opacity: 0;">
          <div class="ux-layout">
            <!-- Asymmetric layout: Large text left, compact visual right -->
            <div class="ux-content-wrapper">
              <!-- Left: Dominant text area -->
              <div class="ux-text-dominant">
                <div class="ux-category-badge">
                  <span>User Experience</span>
                </div>
                <h3 class="ux-main-title">Interfaces that feel<br/>natural and effortless.</h3>
                <div class="ux-description-block">
                  <p class="ux-lead-text">Every pixel matters. Every interaction counts.</p>
                  <p class="ux-detail-text">
                    We craft user interfaces that bridge the gap between complex functionality 
                    and intuitive design. Our approach combines data-driven insights with 
                    human-centered design principles.
                  </p>
                </div>
                <div class="ux-process-steps">
                  <div class="process-step">
                    <div class="step-number">01</div>
                    <div class="step-content">
                      <div class="step-title">Research & Analysis</div>
                      <div class="step-desc">Understanding user needs and behaviors</div>
                    </div>
                  </div>
                  <div class="process-step">
                    <div class="step-number">02</div>
                    <div class="step-content">
                      <div class="step-title">Design & Prototype</div>
                      <div class="step-desc">Creating intuitive user experiences</div>
                    </div>
                  </div>
                  <div class="process-step">
                    <div class="step-number">03</div>
                    <div class="step-content">
                      <div class="step-title">Test & Optimize</div>
                      <div class="step-desc">Continuous improvement through feedback</div>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Right: Compact visual section -->
              <div class="ux-visual-compact">
                <!-- Interface icon illustration -->
                <div class="interface-icon-container">
                  <svg viewBox="0 0 300 240" class="ux-interface-svg">
                    <!-- Main interface window -->
                    <rect x="40" y="40" width="220" height="160" rx="16" fill="white" stroke="#a078c8" stroke-width="3"/>
                    <!-- Top bar -->
                    <rect x="40" y="40" width="220" height="40" rx="16" fill="#a078c8"/>
                    <rect x="45" y="75" width="210" height="120" rx="8" fill="#f8f9fa"/>
                    <!-- Traffic lights -->
                    <circle cx="220" cy="60" r="5" fill="#a078c8"/>
                    <circle cx="235" cy="60" r="5" fill="#a078c8"/>  
                    <circle cx="250" cy="60" r="5" fill="#a078c8"/>
                    <!-- Interface elements -->
                    <rect x="60" y="90" width="180" height="12" rx="6" fill="white" stroke="#a078c8" stroke-width="1"/>
                    <rect x="60" y="110" width="180" height="12" rx="6" fill="white" stroke="#a078c8" stroke-width="1"/>
                    <!-- Search field -->
                    <circle cx="75" cy="116" r="4" fill="none" stroke="#a078c8" stroke-width="1"/>
                    <circle cx="75" cy="116" r="1" fill="#a078c8"/>
                    <!-- UI Grid -->
                    <rect x="60" y="135" width="35" height="35" rx="6" fill="white" stroke="#a078c8" stroke-width="2"/>
                    <rect x="105" y="135" width="35" height="35" rx="6" fill="white" stroke="#a078c8" stroke-width="2"/>
                    <rect x="150" y="135" width="35" height="35" rx="6" fill="white" stroke="#a078c8" stroke-width="2"/>
                    <rect x="195" y="135" width="35" height="35" rx="6" fill="white" stroke="#a078c8" stroke-width="2"/>
                    <!-- Icons -->
                    <line x1="118" y1="145" x2="118" y2="160" stroke="#a078c8" stroke-width="2"/>
                    <line x1="110" y1="152" x2="126" y2="152" stroke="#a078c8" stroke-width="2"/>
                    <line x1="162" y1="142" x2="173" y2="142" stroke="#a078c8" stroke-width="2"/>
                    <line x1="162" y1="152" x2="173" y2="152" stroke="#a078c8" stroke-width="2"/>
                    <line x1="162" y1="162" x2="173" y2="162" stroke="#a078c8" stroke-width="2"/>
                    <rect x="207" y="147" width="6" height="6" fill="#a078c8"/>
                    <rect x="216" y="147" width="6" height="6" fill="#a078c8"/>
                    <rect x="207" y="156" width="6" height="6" fill="#a078c8"/>
                    <rect x="216" y="156" width="6" height="6" fill="#a078c8"/>
                  </svg>
                </div>
                <!-- Minimal floating elements -->
                <div class="ux-floating-dot dot-1"></div>
                <div class="ux-floating-dot dot-2"></div>
                <div class="ux-floating-line line-1"></div>
              </div>
            </div>
            <div class="page-number">02/03</div>
          </div>
        </div>
        
        <!-- Third Services Page: AI Automation (03/03) -->
        <div class="services-page" id="services-page-2" style="opacity: 0;">
          <div class="ai-layout">
            <!-- Split layout: Visual left, Text right -->
            <div class="ai-content-split">
              <!-- Left: AI Agent Visual -->
              <div class="ai-visual-left">
                <!-- AI Brain with network -->
                <div class="ai-brain-visual">
                  <svg viewBox="0 0 350 280" class="ai-svg">
                    <!-- Brain shape with dots -->
                    <g fill="#a078c8">
                      <!-- Brain outline -->
                      <circle cx="110" cy="90" r="3"/><circle cx="125" cy="80" r="3"/><circle cx="140" cy="75" r="3"/>
                      <circle cx="160" cy="70" r="3"/><circle cx="180" cy="73" r="3"/><circle cx="200" cy="80" r="3"/>
                      <circle cx="215" cy="90" r="3"/><circle cx="225" cy="105" r="3"/><circle cx="230" cy="120" r="3"/>
                      <circle cx="228" cy="135" r="3"/><circle cx="220" cy="150" r="3"/><circle cx="205" cy="165" r="3"/>
                      <circle cx="185" cy="175" r="3"/><circle cx="165" cy="180" r="3"/><circle cx="145" cy="177" r="3"/>
                      <circle cx="130" cy="170" r="3"/><circle cx="118" cy="160" r="3"/><circle cx="108" cy="145" r="3"/>
                      <circle cx="105" cy="130" r="3"/><circle cx="107" cy="115" r="3"/>
                      <!-- Inner network -->
                      <circle cx="150" cy="105" r="2"/><circle cx="170" cy="100" r="2"/><circle cx="190" cy="105" r="2"/>
                      <circle cx="160" cy="125" r="2"/><circle cx="180" cy="130" r="2"/><circle cx="200" cy="125" r="2"/>
                      <circle cx="165" cy="145" r="2"/><circle cx="185" cy="145" r="2"/>
                    </g>
                    <!-- External connected nodes -->
                    <g stroke="#a078c8" stroke-width="2" fill="rgba(160, 120, 200, 0.1)">
                      <rect x="50" y="50" width="15" height="15" rx="3"/>
                      <rect x="70" y="180" width="15" height="15" rx="3"/>
                      <rect x="270" y="40" width="15" height="15" rx="3"/>
                      <rect x="260" y="180" width="15" height="15" rx="3"/>
                      <rect x="160" y="25" width="15" height="15" rx="3"/>
                      <rect x="170" y="210" width="15" height="15" rx="3"/>
                      <!-- Connections -->
                      <line x1="65" y1="57" x2="110" y2="90"/>
                      <line x1="77" y1="180" x2="130" y2="170"/>
                      <line x1="270" y1="47" x2="215" y2="90"/>
                      <line x1="267" y1="187" x2="220" y2="150"/>
                      <line x1="167" y1="40" x2="160" y2="70"/>
                      <line x1="177" y1="210" x2="185" y2="175"/>
                    </g>
                  </svg>
                </div>
                <!-- Minimal decorative elements -->
                <div class="ai-decoration dec-1"></div>
                <div class="ai-decoration dec-2"></div>
              </div>
              
              <!-- Right: Text content -->
              <div class="ai-text-right">
                <div class="ai-category-line">
                  <div class="ai-category-text">Automation</div>
                  <div class="ai-category-accent"></div>
                </div>
                <h3 class="ai-title">Intelligent agents<br/>that never sleep.</h3>
                <p class="ai-intro">Transform your workflows with AI that learns, adapts, and optimizes continuously.</p>
                <div class="ai-benefits">
                  <div class="benefit-row">
                    <div class="benefit-metric">24/7</div>
                    <div class="benefit-text">Continuous operation and monitoring</div>
                  </div>
                  <div class="benefit-row">
                    <div class="benefit-metric">99%</div>
                    <div class="benefit-text">Accuracy in automated processes</div>
                  </div>
                  <div class="benefit-row">
                    <div class="benefit-metric">10x</div>
                    <div class="benefit-text">Faster data processing and decisions</div>
                  </div>
                </div>
              </div>
            </div>
            <div class="page-number">03/03</div>
          </div>
        </div>
        
        <!-- SVG for step-by-step connections -->
        <svg class="connections-overlay" id="connectionsOverlay" width="100%" height="100%">
        </svg>
        
        <!-- Step-by-step visualization components (appear after 3 services pages) -->
        <div class="service-step" id="step-0" data-step="0" style="opacity: 0;">
          <div class="service-box modern-website">
            <div class="service-icon">
              <!-- Modern Website Design Image -->
              <svg viewBox="0 0 300 200" class="service-svg">
                <rect x="30" y="30" width="240" height="140" rx="12" fill="none" stroke="#a078c8" stroke-width="3"/>
                <rect x="30" y="30" width="240" height="40" rx="12" fill="#a078c8"/>
                <rect x="35" y="65" width="230" height="100" rx="6" fill="white"/>
                <circle cx="50" cy="50" r="6" fill="#ff5f5f"/>
                <circle cx="70" cy="50" r="6" fill="#ffbd2e"/>  
                <circle cx="90" cy="50" r="6" fill="#27ca3f"/>
                <rect x="130" y="42" width="100" height="16" rx="8" fill="white" stroke="#8a6fb8" stroke-width="1"/>
                <circle cx="220" cy="50" r="7" fill="none" stroke="#8a6fb8" stroke-width="2"/>
                <text x="250" y="56" font-size="16" fill="white" text-anchor="middle">+</text>
                <rect x="45" y="85" width="120" height="6" rx="3" fill="#a078c8"/>
                <rect x="45" y="100" width="90" height="6" rx="3" fill="#a078c8"/>
                <text x="150" y="190" font-size="13" fill="#666" text-anchor="middle">MODERN WEBSITE DESIGN</text>
              </svg>
            </div>
            <h3>Modern Website Design</h3>
            <p>Responsive, performante Web-Lösungen</p>
            <div class="service-textfield" style="opacity: 0;">
              <input type="text" placeholder="Ihre Website-Idee..." />
            </div>
          </div>
        </div>

        <!-- Additional service steps... -->
      </div>
    </section>

  </main>
</body>
</html>

=== APP.JS ===
/* =========================================================
   Effiprocess – Flowing Wave Animation & Services
   ========================================================= */

const clamp = (v, a, b) => Math.max(a, Math.min(b, v));

// ----- Slides Navigation -----
const SLIDE_COUNT = 2;   // 0 Hero, 1 Services (extended)
let currentSlide = 0;
let servicesStep = -1;    // -1 = vor services, 0-2 = Services Pages, 3+ = old step system  
let maxServicesSteps = 20; // 20 steps total
let currentServicesPage = 0; // Aktuelle Services-Seite (0-2)
let connections = [];     // Array für SVG Verbindungen

function goToSlide(index) {
  console.log(`Going to slide ${index}, current: ${currentSlide}, servicesStep: ${servicesStep}`);
  
  // Special handling for Services slide - advance through steps
  if (currentSlide === 1 && index === 1) {
    advanceServicesStep();
    return;
  }
  
  // Reset services when leaving
  if (currentSlide === 1 && index !== 1) {
    resetServices();
  }
  
  // Reset services when entering
  if (index === 1 && currentSlide !== 1) {
    resetServices();
  }

  currentSlide = clamp(index, 0, SLIDE_COUNT - 1);

  // Show/hide slides with better transitions
  document.querySelectorAll('.slide').forEach((el, i) => {
    const active = i === currentSlide;
    
    if (active) {
      el.classList.add('active');
      el.style.opacity = '1';
      el.style.zIndex = '2';
      el.style.pointerEvents = 'auto';
    } else {
      el.classList.remove('active');
      el.style.opacity = '0';
      el.style.zIndex = '1';
      el.style.pointerEvents = 'none';
    }
  });

  updateVerticalArrows();

  // Animation handling
  if (typeof bubbleAnimation !== 'undefined' && bubbleAnimation) {
    if (currentSlide === 0) {
      bubbleAnimation.setModeHero();
    } else {
      bubbleAnimation.setModeHidden();
    }
  }
}

function resetServices() {
  console.log('Resetting services');
  servicesStep = -1;
  hideAllServices();
  clearConnections();
  
  // Show first services page by default when entering services
  setTimeout(() => {
    const firstPage = document.getElementById('services-page-0');
    if (firstPage) {
      firstPage.style.opacity = '1';
    }
  }, 100);
}

function advanceServicesStep() {
  if (servicesStep < maxServicesSteps - 1) {
    servicesStep++;
    console.log(`Advancing to services step: ${servicesStep}`);
    
    // First show services pages (0-2), then old step system (3+)
    if (servicesStep <= 2) {
      showServicesPage(servicesStep);
    } else if (servicesStep <= 7) {
      // Steps 3-7: Show the old step-by-step visualization
      const oldStep = servicesStep - 3; // Convert to 0-4 range
      showServiceStep(oldStep);
      setTimeout(() => {
        updateConnections();
      }, 100);
    } else {
      console.log(`White space step ${servicesStep} - no visual changes`);
    }
  }
  updateVerticalArrows();
}

function showServicesPage(pageIndex) {
  console.log(`Showing services page: ${pageIndex}`);
  
  // Hide all services pages
  document.querySelectorAll('.services-page').forEach(page => {
    page.style.opacity = '0';
  });
  
  // Show current page
  const targetPage = document.getElementById(`services-page-${pageIndex}`);
  if (targetPage) {
    setTimeout(() => {
      targetPage.style.opacity = '1';
    }, 200);
  }
}

function hideAllServices() {
  // Hide services pages
  document.querySelectorAll('.services-page').forEach(page => {
    page.style.opacity = '0';
  });
  
  // Hide service steps
  document.querySelectorAll('.service-step').forEach(step => {
    step.style.opacity = '0';
    step.classList.remove('visible');
  });
}

/* ===== LOADING SYSTEM ===== */
function startLoading() {
  const loadingScreen = document.getElementById('loadingScreen');
  const progressNumber = document.getElementById('progressNumber');
  const progressFill = document.getElementById('progressFill');
  
  if (!loadingScreen || !progressNumber || !progressFill) return;
  
  let progress = 0;
  const loadingDuration = 3000; // 3 Sekunden
  const updateInterval = 50; // Alle 50ms aktualisieren
  const increment = 100 / (loadingDuration / updateInterval);
  
  const loadingInterval = setInterval(() => {
    progress += increment;
    
    if (progress >= 100) {
      progress = 100;
      clearInterval(loadingInterval);
      
      // Kurz bei 100% verweilen, dann ausblenden
      setTimeout(() => {
        loadingScreen.classList.add('fade-out');
        
        // Nach Fade-Out: Hauptseite initialisieren
        setTimeout(() => {
          loadingScreen.style.display = 'none';
          initializeMainSite();
        }, 800);
      }, 500);
    }
    
    // UI aktualisieren
    progressNumber.textContent = Math.floor(progress);
    progressFill.style.width = progress + '%';
  }, updateInterval);
}

function initializeMainSite() {
  console.log('Initializing main site...');
  
  // Show main content
  const slides = document.getElementById('slides');
  if (slides) {
    slides.classList.add('loaded');
  }
  
  // Initialize slides
  document.querySelectorAll('.slide').forEach((el,i)=>{
    el.style.transition='opacity 300ms ease';
    el.style.opacity = i===0 ? '1' : '0';
    el.style.zIndex  = i===0 ? '2' : '1';
    el.style.pointerEvents = i===0 ? 'auto' : 'none';
  });

  bindVerticalArrows();
  goToSlide(0);

  // Start flowing wave animation
  bubbleAnimation = new FlowingWaveAnimation();
  
  console.log('Effiprocess initialized successfully');
}

/* ===== FLOWING WAVE ANIMATION ===== */
class FlowingWaveAnimation {
  constructor() {
    this.canvas = document.getElementById('dotAnimation');
    if (!this.canvas) return;

    this.ctx = this.canvas.getContext('2d');
    this.COLOR = { r: 160, g: 120, b: 200 };
    this.dots = [];
    this.time = 0;
    this.mode = 'hero';
    this.fadeInTime = 0;

    this.setupCanvas();
    this.createFlowingWaves();
    this.bindEvents();
    
    setTimeout(() => {
      requestAnimationFrame(this.animate);
    }, 100);
  }

  setupCanvas() {
    this.canvas.width  = window.innerWidth;
    this.canvas.height = window.innerHeight;
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  }
  
  bindEvents() {
    window.addEventListener('resize', () => {
      this.setupCanvas();
      this.createFlowingWaves();
    });
  }

  createFlowingWaves() {
    const W = this.canvas.width, H = this.canvas.height;
    const cx = W/2, cy = H/2;
    const N = 25000; // Extrem viele Punkte für maximalen Effekt
    
    // Kleinerer Abstand um den Text
    const textZoneRadius = Math.min(W, H) * 0.25; // Kompakterer Text-Schutzbereich
    const minRadius = textZoneRadius * 1.3; // Punkte können näher kommen
    const maxRadius = Math.min(W, H) * 0.52; // Größerer Außenbereich bleibt

    this.dots = [];
    
    // Erste Schicht: Dichte um die Textzone herum
    for (let i = 0; i < N * 0.6; i++) {
      const angle = Math.random() * Math.PI * 2;
      
      const streamType = Math.random();
      let radius;
      
      if (streamType < 0.4) {
        // Große fließende Wellen
        const flow1 = Math.sin(angle * 1.5) * 0.18;
        const flow2 = Math.cos(angle * 3.2) * 0.12;
        radius = minRadius + (Math.random() * (maxRadius - minRadius) * 0.7) * (1 + flow1 + flow2);
      } else if (streamType < 0.7) {
        // Spiralförmige Ströme
        const spiral = Math.sin(angle * 2.8 + Math.cos(angle * 1.2)) * 0.15;
        radius = minRadius + (Math.random() * (maxRadius - minRadius) * 0.8) * (1 + spiral);
      } else {
        // Chaotische Verwirbelungen
        const chaos = Math.sin(angle * 4.1) * Math.cos(angle * 2.3) * 0.1;
        radius = minRadius + (Math.random() * (maxRadius - minRadius) * 0.6) * (1 + chaos);
      }
      
      const x = cx + Math.cos(angle) * radius;
      const y = cy + Math.sin(angle) * radius;
      const size = 1.0 + Math.random() * 1.8;
      const op = 0; // Start mit 0 Opacity, fade langsam ein

      this.dots.push({
        x, y, size, opacity: op,
        tx: x, ty: y, to: op, ts: size,
        phase: Math.random() * Math.PI * 2,
        waveSpeed: 0.6 + Math.random() * 0.8,
        flowType: streamType,
        baseRadius: radius,
        baseAngle: angle,
        amplitude: 4 + Math.random() * 6,
        layer: 'inner',
        cx, cy, textZoneRadius
      });
    }
    
    // Zweite Schicht: Mehr Punkte weiter außen
    const outerMaxRadius = Math.min(W, H) * 0.65; // Viel größerer Außenbereich
    for (let i = 0; i < N * 0.4; i++) {
      const angle = Math.random() * Math.PI * 2;
      
      // Mehr chaotische Verteilung außen
      const outerFlow = Math.sin(angle * 2.1) * Math.cos(angle * 1.8) * 0.2;
      const radius = maxRadius + (Math.random() * (outerMaxRadius - maxRadius)) * (1 + outerFlow);
      
      const x = cx + Math.cos(angle) * radius;
      const y = cy + Math.sin(angle) * radius;
      const size = 0.8 + Math.random() * 1.4;
      const op = 0; // Start mit 0 Opacity außen

      this.dots.push({
        x, y, size, opacity: op,
        tx: x, ty: y, to: op, ts: size,
        phase: Math.random() * Math.PI * 2,
        waveSpeed: 0.4 + Math.random() * 0.6, // Langsamere Bewegung außen
        flowType: Math.random(),
        baseRadius: radius,
        baseAngle: angle,
        amplitude: 6 + Math.random() * 8, // Größere Amplitude außen
        layer: 'outer',
        cx, cy, textZoneRadius
      });
    }
  }

  setModeHero() { this.mode = 'hero'; }
  setModeHidden() { this.mode = 'hidden'; }

  animate = () => {
    this.time += 16;
    this.fadeInTime += 16; // Für sanfte Einblendung
    const W = this.canvas.width, H = this.canvas.height;
    this.ctx.clearRect(0, 0, W, H);

    // Sanfte Einblendung über 2 Sekunden
    const fadeInProgress = Math.min(1, this.fadeInTime / 2000);

    if (this.mode === 'hero') {
      for (const d of this.dots) {
        const waveTime = this.time * 0.001;
        const flowPhase = waveTime * d.waveSpeed + d.phase;
        
        // Verschiedene Fließ-Bewegungen basierend auf Stream-Typ
        let moveX = 0, moveY = 0;
        
        if (d.flowType < 0.4) {
          // Große fließende Wellen
          moveX = Math.sin(flowPhase) * d.amplitude;
          moveY = Math.cos(flowPhase * 1.3) * d.amplitude * 0.7;
          
          // Zusätzliche Überlagerung
          moveX += Math.sin(flowPhase * 2.1) * (d.amplitude * 0.3);
          moveY += Math.cos(flowPhase * 1.7) * (d.amplitude * 0.4);
        } else if (d.flowType < 0.7) {
          // Spiralförmige Bewegung
          const spiralRadius = Math.sin(flowPhase * 0.8) * d.amplitude;
          const spiralAngle = flowPhase * 1.2;
          moveX = Math.cos(spiralAngle) * spiralRadius;
          moveY = Math.sin(spiralAngle) * spiralRadius;
        } else {
          // Chaotische Verwirbelungen
          moveX = Math.sin(flowPhase * 1.4) * d.amplitude * 0.8;
          moveY = Math.cos(flowPhase * 0.9) * d.amplitude * 0.9;
          moveX += Math.sin(flowPhase * 3.2) * (d.amplitude * 0.2);
          moveY += Math.cos(flowPhase * 2.8) * (d.amplitude * 0.25);
        }
        
        // Globale Wellen über das ganze Feld
        const globalWaveX = Math.sin(waveTime * 0.5 + d.baseAngle * 2) * 2;
        const globalWaveY = Math.cos(waveTime * 0.6 + d.baseAngle * 1.8) * 2;
        
        // Neue Position berechnen
        d.tx = d.x + moveX + globalWaveX;
        d.ty = d.y + moveY + globalWaveY;
        
        // Sicherheitslogik: Punkte bleiben außerhalb aber können näher kommen
        const distanceToCenter = Math.hypot(d.tx - d.cx, d.ty - d.cy);
        const safeZone = d.textZoneRadius * 1.25; // Kleinere Sicherheitszone
        
        if (distanceToCenter < safeZone) {
          const escapeAngle = Math.atan2(d.ty - d.cy, d.tx - d.cx);
          const escapeDistance = safeZone + Math.random() * (d.textZoneRadius * 0.3);
          d.tx = d.cx + Math.cos(escapeAngle) * escapeDistance;
          d.ty = d.cy + Math.sin(escapeAngle) * escapeDistance;
        }
        
        // Helligkeitseffekt: Je näher zum Text, desto heller
        const finalDistance = Math.hypot(d.tx - d.cx, d.ty - d.cy);
        const maxBrightDistance = d.textZoneRadius * 2.0;
        
        // Ziel-Opacity für sanfte Einblendung
        const baseOpacity = d.layer === 'inner' ? 0.5 + Math.random() * 0.4 : 0.3 + Math.random() * 0.4;
        let targetBrightness = baseOpacity * fadeInProgress;
        
        if (finalDistance < maxBrightDistance) {
          const proximity = 1 - (finalDistance - d.textZoneRadius * 1.4) / (maxBrightDistance - d.textZoneRadius * 1.4);
          const brightnessBoost = Math.max(0, proximity) * (1.0 - baseOpacity);
          targetBrightness = (baseOpacity + brightnessBoost) * fadeInProgress;
        }
        
        d.to = Math.min(1, targetBrightness);
        d.ts = d.size;
      }
    } else {
      for (const d of this.dots) {
        d.tx = d.x; d.ty = d.y; d.to = 0; d.ts = d.size;
      }
    }

    for (const d of this.dots) {
      d.x += (d.tx - d.x) * 0.08;
      d.y += (d.ty - d.y) * 0.08;
      d.size += (d.ts - d.size) * 0.10;
      d.opacity += (d.to - d.opacity) * 0.05;

      if (d.opacity > 0.02) {
        // Entfernung zum Text für Farbberechnung
        const distanceToText = Math.hypot(d.x - d.cx, d.y - d.cy);
        const textZone = d.textZoneRadius || Math.min(this.canvas.width, this.canvas.height) * 0.35;
        const maxBrightDistance = textZone * 2.0;
        
        let r = this.COLOR.r;
        let g = this.COLOR.g; 
        let b = this.COLOR.b;
        
        // Helligkeitsverteilung: Je näher zum Text (aber außerhalb), desto weißer
        const safeDistance = textZone * 1.25; // Kleinerer Sicherheitsabstand
        if (distanceToText < maxBrightDistance && distanceToText >= safeDistance) {
          const proximity = 1 - (distanceToText - safeDistance) / (maxBrightDistance - safeDistance);
          const whitenFactor = Math.pow(Math.max(0, proximity), 1.2); // Stärkerer Übergang
          
          r = this.COLOR.r + (255 - this.COLOR.r) * whitenFactor;
          g = this.COLOR.g + (255 - this.COLOR.g) * whitenFactor;
          b = this.COLOR.b + (255 - this.COLOR.b) * whitenFactor;
        }
        
        this.ctx.fillStyle = `rgba(${Math.round(r)},${Math.round(g)},${Math.round(b)},${d.opacity})`;
        this.ctx.beginPath();
        this.ctx.arc(d.x, d.y, d.size, 0, Math.PI*2);
        this.ctx.fill();
      }
    }

    requestAnimationFrame(this.animate);
  }
}

let bubbleAnimation;

/* ===== Navigation ===== */
function updateVerticalArrows() {
  const up   = document.querySelector('.nav-vertical .up');
  const down = document.querySelector('.nav-vertical .down');
  if (!up || !down) return;
  
  up.style.display = currentSlide === 0 ? 'none' : 'flex';
  
  if (currentSlide === 0) {
    down.style.display = 'flex';
  } else if (currentSlide === 1) {
    down.style.display = servicesStep < maxServicesSteps - 1 ? 'flex' : 'none';
  } else {
    down.style.display = 'none';
  }
}

function bindVerticalArrows() {
  const up   = document.querySelector('.nav-vertical .up');
  const down = document.querySelector('.nav-vertical .down');
  if (!up || !down) return;

  up.addEventListener('click',   () => goToSlide(currentSlide - 1));
  down.addEventListener('click', () => goToSlide(currentSlide + 1));

  window.addEventListener('keydown', (e) => {
    if (e.repeat) return;
    if (e.key === 'ArrowUp'   || e.key === 'PageUp')   goToSlide(currentSlide - 1);
    if (e.key === 'ArrowDown' || e.key === 'PageDown') goToSlide(currentSlide + 1);
    if (e.key === 'Home') goToSlide(0);
    if (e.key === 'End')  goToSlide(SLIDE_COUNT - 1);
  });

  ['wheel','touchmove'].forEach(evt =>
    window.addEventListener(evt, e => e.preventDefault(), { passive:false })
  );
}

/* ===== Initialize ===== */
document.addEventListener('DOMContentLoaded', () => {
  // Start mit Ladebildschirm
  startLoading();
});

===============================
COMPLETE CODE AKTUALISIERT
Navigation: Hero → Services (3 Seiten: Website/UX/AI) → Step-by-Step → Weißraum
Ladebildschirm: 3s Progress 0-100 → Fade zu Hero
Animation: 25.000 Punkte, fließende Wellen um Text
===============================